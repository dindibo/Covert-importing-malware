#include <Windows.h>
#include <iostream>

unsigned long hashFunc(unsigned char* str)
{
	unsigned long hash = 5381;
	int c;

	while (c = *str++)
		hash = ((hash << 5) + hash) + c; /* hash * 33 + c */

	return hash;
}

DWORD getFuncByHash(HMODULE hMod, unsigned long hashVal) {
	DWORD base = (DWORD)hMod;

	PIMAGE_DOS_HEADER imgDos = (PIMAGE_DOS_HEADER)base;
	PIMAGE_NT_HEADERS32 pe = (PIMAGE_NT_HEADERS32)(base + (imgDos->e_lfanew));

	PIMAGE_EXPORT_DIRECTORY exportDir = (PIMAGE_EXPORT_DIRECTORY)(base + pe->OptionalHeader.DataDirectory[0].VirtualAddress);

	PDWORD namePtr = (PDWORD)(base + exportDir->AddressOfNames);
	PWORD ordPtr = (PWORD)(base + exportDir->AddressOfNameOrdinals);

	for (int i = 0; i < exportDir->NumberOfNames; i++,++namePtr, ++ordPtr)
	{
#define NAME_PTR ((char*)(base + *namePtr))
		unsigned long val = hashFunc((unsigned char *)NAME_PTR);

		if (val == hashVal) {
			return (base + exportDir->AddressOfFunctions + *ordPtr * 4);
		}

#undef NAME_PTR
	}

	return NULL;
}

int getKernel32() {
	__asm {
		mov eax, fs:0x30
		mov eax, [eax + 0x0C]
		mov eax, [eax + 0x14]
		mov eax, [eax]
		mov eax, [eax]
		add eax, 0x10
		mov eax, [eax]
	}
}

int getNt() {
	__asm {
		mov eax, fs:0x30
		mov eax, [eax + 0x0C]
		mov eax, [eax + 0x14]
		mov eax, [eax]
		add eax, 0x10
		mov eax, [eax]
	}
}


int main()
{

//#define HASHING

#ifdef HASHING
	printf("%lu\n", hashFunc((unsigned char*)"Sleep"));
#else

#define LoadLibraryA_HASH   1606414587
#define GetProcAddress_HASH	3476142879
#define Sleep_HASH          236578302
	

	HMODULE modK32 = (HMODULE)getKernel32();

	typedef void (WINAPI* sleep_p)(DWORD);
	sleep_p sleep_ptr;

	sleep_ptr = (sleep_p)getFuncByHash(modK32, Sleep_HASH);

	puts("Before");

	(*sleep_ptr)(30000);

	puts("After");


#endif HASHING
}
